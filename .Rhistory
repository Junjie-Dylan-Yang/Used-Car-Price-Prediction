#--------------------------------feature engineering---------------------------
#Group Brand
levels(data$manufacturer)
luxury = c('acura','alfa-romeo','aston-martin', 'audi', 'bmw','cadillac','ferrari','harley-davidson',
'infiniti','jaguar','land rover','lexus','lincoln','mercedes-benz','mini','morgan',
'porsche','rover','tesla','volvo')
economy = c('buick', 'chevrolet','chrysler','dodge','fiat','ford','gmc','honda','hyundai','jeep','kia',
'mazda','mercury','mitsubishi','nissan','pontiac','ram','saturn','subaru','toyota','volkswagen')
data_removena = data_removena%>%
mutate(brand = ifelse(data_removena$manufacturer %in% luxury, "luxury","common"))
summary(data_removena$brand)
#-----------------------------------EDA-----------------------------------------
#Do EDA on data_removena
#See avg price for each condition group
aggregate(data$price, list(data$condition), FUN=mean)
aggregate(data_removena$price, list(data_removena$condition), FUN=mean)
#Chart to show insightful distribution
#Price by state
library(tidyverse)
library(lubridate)
library(imputeTS)
library(caret)
library(dplyr)
library(gutenbergr)
library(parallel)
library(doParallel)
library(choroplethr)
library(choroplethrMaps)
#--------------------------------Import Data------------------------------------
data_og <- read.csv('/Users/huiwang/Downloads/vehicles.csv')
#--------------------------Data Cleansing - Remove Outliers---------------------
str(data)
summary(data)
#Save url for future verification
data = subset(data_og,select = -c(region_url,county,lat,long, VIN,
image_url, image_url, description,region))
data$posting_date <- round_date(as.Date(data$posting_date),"day")
#Remove entries with price=0 and some potential outliers
summary(data$price)
boxplot(data$price)
#Price = 0
length(which(data$price == 0))
#0 < Price < 1000
length(which(data$price > 0 & data$price <= 1000))
#100k and above, check data and confirm >350k are wrong data
tenk = data[which(data$price > 100000), ]
#Remain 500<price<350k
data = data%>%filter(data$price %in% (1000:350000))
boxplot(data$price)
#Year 2000 and prior
#The scope of the PJ to consider fair trade of a used car for commute.
#Hence, vintage car would be excluded
length(which(data$year < 2000))
data = data%>%filter(data$year >= 2000)
#Mileage, consider 50 and above.
length(which(data$odometer < 50))
length(which(data$odometer > 300000))
data = data%>%filter(data$odometer %in% (50:300000))
#--------------------------Data Cleansing - Handling NA-------------------------
#All Entries are unique
summary(duplicated(data$id))
data[data == ""] <- NA
colSums(is.na(data))
#Apparently, some variables are not missing by random, some column have the missing rate are
#as high as 70%
#"cutoff" for missing data is to consider to 50%, if above, del variable and
#The "missing-at-random" assumptions needed for multiple imputation don't hold in our case, so NA can't be imputed.
#install.packages("VIM")
library(VIM)
na_plot <- aggr(data, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
#Drop 'size' because it has over 70% na and 'type' contains similar info.
#Other columns won't be dropped even with 40% because it might have very high information about the pricing.
###!!! In Improvement Session, we can talk about this more, for better data etc!!!
data_remove_size = subset(data,select = -c(size))
colSums(is.na(data_remove_size))
str(data)
#If del rows with any NA
data_removena = data_remove_size[complete.cases(data_remove_size), ]
colSums(is.na(data_removena))
#--------------------------------feature engineering---------------------------
#Group Brand
levels(data$manufacturer)
luxury = c('acura','alfa-romeo','aston-martin', 'audi', 'bmw','cadillac','ferrari','harley-davidson',
'infiniti','jaguar','land rover','lexus','lincoln','mercedes-benz','mini','morgan',
'porsche','rover','tesla','volvo')
economy = c('buick', 'chevrolet','chrysler','dodge','fiat','ford','gmc','honda','hyundai','jeep','kia',
'mazda','mercury','mitsubishi','nissan','pontiac','ram','saturn','subaru','toyota','volkswagen')
data_removena = data_removena%>%
mutate(brand = ifelse(data_removena$manufacturer %in% luxury, "luxury","common"))
summary(data_removena$brand)
aggregate(data_removena$price, list(data_removena$condition), FUN=mean)
#aggregate(data$price, list(data$condition), FUN=mean)
brand_price = data.frame(aggregate(data_removena$price, list(data_removena$condition), FUN=mean))
brand_price
ggplot(data=condition_price, aes(condition_price$Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=..count..)) +
....(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Count", low="green", high="red")
condition_price = data.frame(aggregate(data_removena$price, list(data_removena$condition), FUN=mean))
condition_price
ggplot(data=condition_price, aes(condition_price$Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=..count..)) +
....(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Count", low="green", high="red")
ggplot(data=condition_price, aes(condition_price$Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=..count..)) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Count", low="green", high="red")
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=..count..)) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Count", low="green", high="red")
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=..count..)) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Avg.price", low="green", high="red")
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=Avg.price)) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Avg.price", low="green", high="red")
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=x)) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Avg.price", low="green", high="red")
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
aes(fill=..x..)) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
scale_fill_gradient("Avg.price", low="green", high="red")
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
#aggregate(data$price, list(data$condition), FUN=mean)
condition_price = data.frame(aggregate(data_removena$price, list(data_removena$condition), FUN=mean))
condition_price
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
condition_price$x = int(condition_price$x)
condition_price = data.frame(aggregate(data_removena$price, list(data_removena$condition), FUN=mean))
condition_price$x = round(condition_price$x, digits = 0)
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
condition_price
descibe(condition_price)
describe(condition_price)
summary(condition_price)
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(data=condition_price, aes(Group.1)) +
geom_histogram(binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
#ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(data=condition_price, aes(Group.1)) +
stat_count(width = 0.5, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(data=condition_price, aes(Group.1)) +
stat_count(width = 0.5) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(data=condition_price, aes(Group.1)) +
geom_bar(width = 0.5) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(data=condition_price, aes(Group.1,fill = x)) +
geom_bar(width = 0.5) +
ggtitle("Bin size = 3") +
theme_ipsum() +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(data=condition_price, aes(Group.1,fill = x)) +
geom_bar(width = 0.5) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(condition_price, aes(x=Group.1, fill = x)) +
geom_histogram(binwidth = 0.5) +
ggtitle ("Pclass") +
xlab("Title") +
ylab("Total count") +
labs(fill = "Survived")
ggplot(condition_price, aes(x=Group.1, fill = x)) +
geom_bar(binwidth = 0.5) +
ggtitle ("Pclass") +
xlab("Title") +
ylab("Total count") +
labs(fill = "Survived")
ggplot(condition_price, aes(x=Group.1)) +
geom_bar(binwidth = 0.5) +
ggtitle ("Pclass") +
xlab("Title") +
ylab("Total count") +
labs(fill = "Survived")
#Avg.Price by state
level(data_removena$state)
#Avg.Price by state
levels(data_removena$state)
#Avg.Price by state
unique(data_removena$state)
state_price = data.frame(aggregate(data_removena$price, list(data_removena$state), FUN=mean))
state_price
names(state_price) <- c("region", "value")
# create side-by-side choropleth maps
data(continental_us_states)
grid.arrange(state_choropleth(state_price, title  = "Education Level in the US", zoom = continental_us_states))
names(state_price) <- c("region", "value")
state_price$region = toupper(state_price$region)
# create side-by-side choropleth maps
data(continental_us_states)
grid.arrange(state_choropleth(state_price, title  = "Education Level in the US", zoom = continental_us_states))
ggplot(condition_price, aes(x=condition, y=x)) +
geom_point(size=2, shape=23)
names(condition_price) = c("condition", "avg.price")
ggplot(condition_price, aes(x=condition, y=avg.price)) +
geom_point(size=2, shape=23)
ggplot(condition_price, aes(x=condition, y=avg.price)) +
geom_point(size=2, shape=23) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price")
ggplot(condition_price, aes(x=condition, y=avg.price)) +
geom_point(size=2, shape=23) +
main(title="Avg. Price of Condition", x="Condition", y="Avg.price")
ggplot(condition_price, aes(x=condition, y=avg.price)) +
geom_point(size=2, shape=23) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(condition_price, aes(x=condition, y=avg.price)) +
geom_point(size=2, shape=23) +
geom_text(label=rownames(avg.price)) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(condition_price, aes(x=condition, y=avg.price)) +
geom_point(size=2, shape=23) +
geom_text(label=avg.price) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(condition_price, aes(x=condition, y=avg.price, shape=avg.price, color=avg.price)) +
geom_point(size=2, shape=23) +
geom_text(label=avg.price) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(condition_price, aes(x=condition, y=avg.price, shape=avg.price, color=avg.price)) +
geom_point(size=2, shape=23) +
#geom_text(label=avg.price) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price") +
theme(plot.title = element_text(size=15))
ggplot(condition_price, aes(x=condition, y=avg.price, )) +
geom_point(size=2, shape=23) +
geom_text(label=condition_price$avg.price) +
labs(title="Avg. Price of Condition", x="Condition", y="Avg.price")
ggplot(data_removena, aes(x=condition, y=price, fill=treatment)) +
geom_boxplot()
ggplot(data_removena, aes(x=condition, y=price)) +
geom_boxplot()
ggplot(data_removena, aes(x=condition, y=price, fill=condition)) +
geom_boxplot()
ggplot(data_removena, aes(x=condition, y=price, fill=condition)) +
geom_boxplot() +
labs(title="Price of Condition")
# create side-by-side choropleth maps
state_choropleth(state_price, title  = "Avg.Price of Used Car by State in the US", zoom = continental_us_states)
library(choroplethr)
library(choroplethrMaps)
unique(data_removena$state)
state_avgprice = data.frame(aggregate(data_removena$price, list(data_removena$state), FUN=mean))
state_avgprice
# change column name
names(state_avgprice) = c("region", "value")
state_avgprice$region = toupper(stastate_avgpricete_price$region)
# create side-by-side choropleth maps
state_choropleth(state_avgprice, title  = "Avg.Price of Used Car by State in the US")
data(df_president)
View(df_president)
unique(data(df_president)$region)
unique(df_president$region)
state_avgprice$region
state_avgprice$region = c("alaska","alabama","arkansas","arizona","california","colorado","connecticut",
"district of columbia","delaware","florida","georgia","hawaii","iowa","idaho",
"illinois","indiana","kansas","kentucky","louisiana","massachusetts","maryland",
"maine","michigan","minnesota","missouri","mississippi","montana","north carolina",
"north dakota","nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","rhode island","south carolina",
"south dakota","tennessee","texas","utah","virginia","vermont","washington",
"wisconsin","west virginia","wyoming")
# create side-by-side choropleth maps
state_choropleth(state_avgprice, title  = "Avg.Price of Used Car by State in the US")
ggplot(data_removena, aes(x=manufacture)) +
geom_point(size=2, shape=23) +
labs(title="Count of Manufacture", x="Manufacture", y="Count")
head(data_removena)
ggplot(data_removena, aes(x=manufacturer)) +
geom_point(size=2, shape=23) +
labs(title="Count of Manufacturer", x="Manufacturer", y="Count")
ggplot(data_removena, aes(x=manufacturer)) +
geom_histogram(fill="white") +
labs(title="Count of Manufacturer", x="Manufacturer", y="Count")
ggplot(data_removena, aes(x=manufacturer)) +
geom_histogram()
ggplot(data_removena, aes(x=manufacturer)) +
geom_bar()
ggplot(data_removena, aes(x=manufacturer,color=brand)) +
geom_bar()
ggplot(data_removena, aes(x=manufacturer,color=brand)) +
geom_bar(fill="white")
#Most common car
table(vecdata_removena$model)
#Most common car
table(data_removena$model)
#Most common car
sort(table(data_removena$model))
#Most common car
head(sort(table(data_removena$model)))
head(sort(table(data_removena$manufacturer)))
sort(table(data_removena$manufacturer),, decreasing = TRUE)[1:5]
#Most common car
sort(table(data_removena$model),, decreasing = TRUE)[1:5]
sort(table(data_removena$year),, decreasing = TRUE)[1:5]
sort(table(data_removena$date),, decreasing = TRUE)[1:5]
sort(table(data_removena$drive),, decreasing = TRUE)[1:5]
#Which day has the most posting? Which days tend to have more expensive posting?
sort(table(data_removena$posting_date),, decreasing = TRUE)[1:5]
ggplot(data_removena, aes(x=posting_date,color=brand)) +
geom_bar(fill="white") +
labs(title="Count of posting_date")
library(ggplot2)
ggplot(data_removena, aes(x=condition, y=price, fill=condition)) +
geom_boxplot() +
labs(title="Price of Condition")
state_choropleth(state_avgprice, title  = "Avg.Price of Used Car by State in the US")
ggplot(data_removena, aes(x=manufacturer,color=brand)) +
geom_bar(fill="white") +
labs(title="Count of Manufacturer")
ggplot(data_removena, aes(x=posting_date,color=brand)) +
geom_bar(fill="white") +
labs(title="Count of Posting_date by Brand")
ggplot(data_removena, aes(x=manufacturer,color=brand)) +
geom_bar(fill="white") +
labs(title="Count of Manufacturer")
library(tidyverse)
library(lubridate)
library(imputeTS)
library(caret)
library(dplyr)
library(gutenbergr)
library(parallel)
library(doParallel)
#--------------------------------Import Data------------------------------------
data_og <- read.csv('vehicles.csv')
#--------------------------Data Cleansing - Remove Outliers---------------------
str(data)
summary(data)
#Save url for future verification
data = subset(data_og,select = -c(region_url,county,lat,long, VIN,
image_url, image_url, description,region))
data$posting_date <- round_date(as.Date(data$posting_date),"day")
#Remove entries with price=0 and some potential outliers
summary(data$price)
boxplot(data$price)
#Price = 0
length(which(data$price == 0))
#0 < Price < 1000
length(which(data$price > 0 & data$price <= 1000))
#100k and above, check data and confirm >350k are wrong data
tenk = data[which(data$price > 100000), ]
#Remain 500<price<350k
data = data%>%filter(data$price %in% (1000:350000))
boxplot(data$price)
#Year 2000 and prior
#The scope of the PJ to consider fair trade of a used car for commute.
#Hence, vintage car would be excluded
length(which(data$year < 2000))
data = data%>%filter(data$year >= 2000)
#Mileage, consider 50 and above.
length(which(data$odometer < 50))
length(which(data$odometer > 300000))
data = data%>%filter(data$odometer %in% (50:300000))
#--------------------------Data Cleansing - Handling NA-------------------------
#All Entries are unique
summary(duplicated(data$id))
data[data == ""] <- NA
colSums(is.na(data))
#Apparently, some variables are not missing by random, some column have the missing rate are
#as high as 70%
#"cutoff" for missing data is to consider to 50%, if above, del variable and
#The "missing-at-random" assumptions needed for multiple imputation don't hold in our case, so NA can't be imputed.
#install.packages("VIM")
library(VIM)
na_plot <- aggr(data, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
#Drop 'size' because it has over 70% na and 'type' contains similar info.
#Other columns won't be dropped even with 40% because it might have very high information about the pricing.
###!!! In Improvement Session, we can talk about this more, for better data etc!!!
data_remove_size = subset(data,select = -c(size))
colSums(is.na(data_remove_size))
str(data)
#If del rows with any NA
data_removena = data_remove_size[complete.cases(data_remove_size), ]
colSums(is.na(data_removena))
#--------------------------------feature engineering---------------------------
#Group Brand
levels(data$manufacturer)
luxury = c('acura','alfa-romeo','aston-martin', 'audi', 'bmw','cadillac','ferrari','harley-davidson',
'infiniti','jaguar','land rover','lexus','lincoln','mercedes-benz','mini','morgan',
'porsche','rover','tesla','volvo')
economy = c('buick', 'chevrolet','chrysler','dodge','fiat','ford','gmc','honda','hyundai','jeep','kia',
'mazda','mercury','mitsubishi','nissan','pontiac','ram','saturn','subaru','toyota','volkswagen')
data_removena = data_removena%>%
mutate(brand = ifelse(data_removena$manufacturer %in% luxury, "luxury","common"))
#summary(data_removena$brand)
#-----------------------------------EDA-----------------------------------------
#Do EDA on data_removena
#Distribution of price
hist(data_removena$price)
hist(data_removena$price) + labs(title="Avg. Price of Condition", x="Condition", y="Avg.price")
#Distribution among condition
ggplot(data_removena, aes(condition, fill=condition))+geom_bar(stat = 'count')
ggplot(data_removena, aes(condition, fill=condition)) +
geom_bar(stat = 'count') +
labs(title="Count of Condition")
aggregate(data$price, list(data$condition), FUN=mean)
aggregate(data_removena$price, list(data_removena$condition), FUN=mean)
library(ggplot2)
ggplot(data_removena, aes(x=condition, y=price, fill=condition)) +
geom_boxplot() +
labs(title="Price of Condition")
#Avg.Price by state
library(choroplethr)
library(choroplethrMaps)
state_avgprice = data.frame(aggregate(data_removena$price, list(data_removena$state), FUN=mean))
state_avgprice
# change column name
names(state_avgprice) = c("region", "value")
state_avgprice$region
#unique(df_president$region)
state_avgprice$region = c("alaska","alabama","arkansas","arizona","california","colorado","connecticut",
"district of columbia","delaware","florida","georgia","hawaii","iowa","idaho",
"illinois","indiana","kansas","kentucky","louisiana","massachusetts","maryland",
"maine","michigan","minnesota","missouri","mississippi","montana","north carolina",
"north dakota","nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","rhode island","south carolina",
"south dakota","tennessee","texas","utah","virginia","vermont","washington",
"wisconsin","west virginia","wyoming")
# create side-by-side choropleth maps
state_choropleth(state_avgprice, title  = "Avg.Price of Used Car by State in the US")
#count by manufacturer
ggplot(data_removena, aes(x=manufacturer,color=brand)) +
geom_bar(fill="white") +
labs(title="Count of Manufacturer")+
coord_flip()
ggplot(data_removena, aes(x=posting_date,color=brand)) +
geom_bar(fill="white") +
labs(title="Count of Posting_date by Brand")
ggplot(data_removena, aes(x=odometer, y=price))+
geom_point()
ggplot(data_removena, aes(x=odometer, y=price)) +
geom_point() +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
ggplot(data_removena, aes(x=odometer, y=price, color=brand, shape=brand)) +
geom_point() +
geom_smooth(method=lm)
ggplot(data_removena, aes(x=odometer, y=price, color=brand, shape=brand)) +
geom_point(shape=23) +
geom_smooth(method=lm)
ggplot(data_removena, aes(x=odometer, y=price, color=brand, shape=brand)) +
geom_point(shape=23)
ggplot(data_removena, aes(x=odometer, y=price, color=brand, shape=brand)) +
geom_point(shape=23) +
labs(title="Price over Odometer by Brand")
